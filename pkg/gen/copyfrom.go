// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: copyfrom.go

package gen

import (
	"context"
)

// iteratorForCreateManyGoods implements pgx.CopyFromSource.
type iteratorForCreateManyGoods struct {
	rows                 []CreateManyGoodsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateManyGoods) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateManyGoods) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Article,
		r.rows[0].Price,
		r.rows[0].Name,
		r.rows[0].Quantity,
		r.rows[0].IsAlive,
	}, nil
}

func (r iteratorForCreateManyGoods) Err() error {
	return nil
}

func (q *Queries) CreateManyGoods(ctx context.Context, arg []CreateManyGoodsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"goods"}, []string{"article", "price", "name", "quantity", "is_alive"}, &iteratorForCreateManyGoods{rows: arg})
}
