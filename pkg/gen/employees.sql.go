// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: employees.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO Employees (account_id, role_id, created_at, is_alive)
VALUES ($1, $2, $3, $4)
RETURNING id, account_id, role_id, created_at, is_alive
`

type CreateEmployeeParams struct {
	AccountID int32
	RoleID    int32
	CreatedAt pgtype.Timestamp
	IsAlive   bool
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.AccountID,
		arg.RoleID,
		arg.CreatedAt,
		arg.IsAlive,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoleID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
UPDATE Employees
SET is_alive = false
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT
    e.id,
    e.account_id,
    e.role_id,
    e.created_at,
    e.is_alive,

    a.id as id_account,
    a.login as account_login,
    a.created_at as account_created_at,
    a.is_alive as account_is_alive,

    r.id as id_role,
    r.name as role_name,
    r.created_at as role_created_at

FROM Employees e
         JOIN Accounts a ON e.account_id = a.id
         JOIN Roles r ON e.role_id = r.id
WHERE e.id = $1
LIMIT 1
`

type GetEmployeeRow struct {
	ID               int32
	AccountID        int32
	RoleID           int32
	CreatedAt        pgtype.Timestamp
	IsAlive          bool
	IDAccount        int32
	AccountLogin     string
	AccountCreatedAt pgtype.Timestamp
	AccountIsAlive   bool
	IDRole           int32
	RoleName         string
	RoleCreatedAt    pgtype.Timestamp
}

func (q *Queries) GetEmployee(ctx context.Context, id int32) (GetEmployeeRow, error) {
	row := q.db.QueryRow(ctx, getEmployee, id)
	var i GetEmployeeRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoleID,
		&i.CreatedAt,
		&i.IsAlive,
		&i.IDAccount,
		&i.AccountLogin,
		&i.AccountCreatedAt,
		&i.AccountIsAlive,
		&i.IDRole,
		&i.RoleName,
		&i.RoleCreatedAt,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT
    e.id,
    e.account_id,
    e.role_id,
    e.created_at,
    e.is_alive,

    a.id as id_account,
    a.login as account_login,
    a.created_at as account_created_at,
    a.is_alive as account_is_alive,

    r.id as id_role,
    r.name as role_name,
    r.created_at as role_created_at

FROM Employees e
         JOIN Accounts a ON e.account_id = a.id
         JOIN Roles r ON e.role_id = r.id
WHERE e.is_alive = true
ORDER BY e.id
`

type ListEmployeesRow struct {
	ID               int32
	AccountID        int32
	RoleID           int32
	CreatedAt        pgtype.Timestamp
	IsAlive          bool
	IDAccount        int32
	AccountLogin     string
	AccountCreatedAt pgtype.Timestamp
	AccountIsAlive   bool
	IDRole           int32
	RoleName         string
	RoleCreatedAt    pgtype.Timestamp
}

func (q *Queries) ListEmployees(ctx context.Context) ([]ListEmployeesRow, error) {
	rows, err := q.db.Query(ctx, listEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEmployeesRow
	for rows.Next() {
		var i ListEmployeesRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.RoleID,
			&i.CreatedAt,
			&i.IsAlive,
			&i.IDAccount,
			&i.AccountLogin,
			&i.AccountCreatedAt,
			&i.AccountIsAlive,
			&i.IDRole,
			&i.RoleName,
			&i.RoleCreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE Employees
SET role_id  = $2,
    is_alive = $3
WHERE id = $1
RETURNING id, account_id, role_id, created_at, is_alive
`

type UpdateEmployeeParams struct {
	ID      int32
	RoleID  int32
	IsAlive bool
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, updateEmployee, arg.ID, arg.RoleID, arg.IsAlive)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.RoleID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}
