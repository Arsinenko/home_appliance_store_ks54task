// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: goods_suppliers.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGoodsSupplier = `-- name: CreateGoodsSupplier :one
INSERT INTO Goods_Suppliers (id, supplier_id, good_id, created_at, is_alive)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, supplier_id, good_id, created_at, is_alive
`

type CreateGoodsSupplierParams struct {
	ID         int32
	SupplierID int32
	GoodID     int32
	CreatedAt  pgtype.Timestamp
	IsAlive    bool
}

func (q *Queries) CreateGoodsSupplier(ctx context.Context, arg CreateGoodsSupplierParams) (GoodsSupplier, error) {
	row := q.db.QueryRow(ctx, createGoodsSupplier,
		arg.ID,
		arg.SupplierID,
		arg.GoodID,
		arg.CreatedAt,
		arg.IsAlive,
	)
	var i GoodsSupplier
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.GoodID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}

const createGoodsSuppliers = `-- name: CreateGoodsSuppliers :one
INSERT INTO Goods_Suppliers (id, supplier_id, good_id, created_at, is_alive)
VALUES ($1, $2, $3, $4, $5)
    RETURNING id, supplier_id, good_id, created_at, is_alive
`

type CreateGoodsSuppliersParams struct {
	ID         int32
	SupplierID int32
	GoodID     int32
	CreatedAt  pgtype.Timestamp
	IsAlive    bool
}

func (q *Queries) CreateGoodsSuppliers(ctx context.Context, arg CreateGoodsSuppliersParams) (GoodsSupplier, error) {
	row := q.db.QueryRow(ctx, createGoodsSuppliers,
		arg.ID,
		arg.SupplierID,
		arg.GoodID,
		arg.CreatedAt,
		arg.IsAlive,
	)
	var i GoodsSupplier
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.GoodID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}

const deleteGoodsSupplier = `-- name: DeleteGoodsSupplier :exec
UPDATE Goods_Suppliers
SET is_alive = false
WHERE id = $1
`

// "Мягкое" удаление связи товара с поставщиком
func (q *Queries) DeleteGoodsSupplier(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGoodsSupplier, id)
	return err
}

const getGoodsSupplier = `-- name: GetGoodsSupplier :one
SELECT id, supplier_id, good_id, created_at, is_alive
FROM Goods_Suppliers
WHERE id = $1
    LIMIT 1
`

func (q *Queries) GetGoodsSupplier(ctx context.Context, id int32) (GoodsSupplier, error) {
	row := q.db.QueryRow(ctx, getGoodsSupplier, id)
	var i GoodsSupplier
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.GoodID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}

const listGoodsBySupplier = `-- name: ListGoodsBySupplier :many
SELECT g.id, g.article, g.price, g.name, g.quantity, g.is_alive
FROM Goods g
         JOIN Goods_Suppliers gs ON g.id = gs.good_id
WHERE gs.supplier_id = $1
  AND g.is_alive = true
  AND gs.is_alive = true
`

// Получаем все товары для конкретного поставщика
func (q *Queries) ListGoodsBySupplier(ctx context.Context, supplierID int32) ([]Good, error) {
	rows, err := q.db.Query(ctx, listGoodsBySupplier, supplierID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Good
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.Article,
			&i.Price,
			&i.Name,
			&i.Quantity,
			&i.IsAlive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSuppliersByGood = `-- name: ListSuppliersByGood :many
SELECT s.id, s.account_id, s.created_at, s.is_alive, a.login
FROM Suppliers s
         JOIN Goods_Suppliers gs ON s.id = gs.supplier_id
         JOIN Accounts a ON s.account_id = a.id
WHERE gs.good_id = $1
  AND s.is_alive = true
  AND gs.is_alive = true
`

type ListSuppliersByGoodRow struct {
	ID        int32
	AccountID int32
	CreatedAt pgtype.Timestamp
	IsAlive   bool
	Login     string
}

// Получаем всех поставщиков для конкретного товара, включая их логины
func (q *Queries) ListSuppliersByGood(ctx context.Context, goodID int32) ([]ListSuppliersByGoodRow, error) {
	rows, err := q.db.Query(ctx, listSuppliersByGood, goodID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSuppliersByGoodRow
	for rows.Next() {
		var i ListSuppliersByGoodRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.CreatedAt,
			&i.IsAlive,
			&i.Login,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoodsSupplier = `-- name: UpdateGoodsSupplier :one
UPDATE Goods_Suppliers
SET is_alive = $2
WHERE id = $1
    RETURNING id, supplier_id, good_id, created_at, is_alive
`

type UpdateGoodsSupplierParams struct {
	ID      int32
	IsAlive bool
}

func (q *Queries) UpdateGoodsSupplier(ctx context.Context, arg UpdateGoodsSupplierParams) (GoodsSupplier, error) {
	row := q.db.QueryRow(ctx, updateGoodsSupplier, arg.ID, arg.IsAlive)
	var i GoodsSupplier
	err := row.Scan(
		&i.ID,
		&i.SupplierID,
		&i.GoodID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}
