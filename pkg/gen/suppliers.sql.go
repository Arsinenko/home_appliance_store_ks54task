// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: suppliers.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO Suppliers (id, account_id, created_at, is_alive)
VALUES ($1, $2, $3, $4)
    RETURNING id, account_id, created_at, is_alive
`

type CreateSupplierParams struct {
	ID        int32
	AccountID int32
	CreatedAt pgtype.Timestamp
	IsAlive   bool
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, createSupplier,
		arg.ID,
		arg.AccountID,
		arg.CreatedAt,
		arg.IsAlive,
	)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
UPDATE Suppliers
SET is_alive = false
WHERE id = $1
`

func (q *Queries) DeleteSupplier(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteSupplier, id)
	return err
}

const getSupplier = `-- name: GetSupplier :one
SELECT s.id, s.account_id, s.created_at, s.is_alive, a.login
FROM Suppliers s
         JOIN Accounts a ON s.account_id = a.id
WHERE s.id = $1
    LIMIT 1
`

type GetSupplierRow struct {
	ID        int32
	AccountID int32
	CreatedAt pgtype.Timestamp
	IsAlive   bool
	Login     string
}

// Получаем поставщика вместе с его логином
func (q *Queries) GetSupplier(ctx context.Context, id int32) (GetSupplierRow, error) {
	row := q.db.QueryRow(ctx, getSupplier, id)
	var i GetSupplierRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.CreatedAt,
		&i.IsAlive,
		&i.Login,
	)
	return i, err
}

const listSuppliers = `-- name: ListSuppliers :many
SELECT s.id, s.account_id, s.created_at, s.is_alive, a.login
FROM Suppliers s
         JOIN Accounts a ON s.account_id = a.id
WHERE s.is_alive = true
ORDER BY s.id
`

type ListSuppliersRow struct {
	ID        int32
	AccountID int32
	CreatedAt pgtype.Timestamp
	IsAlive   bool
	Login     string
}

// Получаем список поставщиков вместе с их логинами
func (q *Queries) ListSuppliers(ctx context.Context) ([]ListSuppliersRow, error) {
	rows, err := q.db.Query(ctx, listSuppliers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSuppliersRow
	for rows.Next() {
		var i ListSuppliersRow
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.CreatedAt,
			&i.IsAlive,
			&i.Login,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE Suppliers
SET is_alive = $2
WHERE id = $1
    RETURNING id, account_id, created_at, is_alive
`

type UpdateSupplierParams struct {
	ID      int32
	IsAlive bool
}

func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, updateSupplier, arg.ID, arg.IsAlive)
	var i Supplier
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}
