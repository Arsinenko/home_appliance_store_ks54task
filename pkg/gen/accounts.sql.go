// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO Accounts (login, password, created_at, is_alive)
VALUES ($1, $2, $3, $4)
RETURNING id, login, password, created_at, is_alive
`

type CreateAccountParams struct {
	Login     string
	Password  string
	CreatedAt pgtype.Timestamp
	IsAlive   bool
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.Login,
		arg.Password,
		arg.CreatedAt,
		arg.IsAlive,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
UPDATE Accounts
SET is_alive = false
WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT id, login, password, created_at, is_alive
FROM Accounts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, login, password, created_at, is_alive
FROM Accounts
WHERE is_alive = true
ORDER BY login
`

func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Password,
			&i.CreatedAt,
			&i.IsAlive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE Accounts
SET login    = $2,
    password = $3,
    is_alive = $4
WHERE id = $1
RETURNING id, login, password, created_at, is_alive
`

type UpdateAccountParams struct {
	ID       int32
	Login    string
	Password string
	IsAlive  bool
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.Login,
		arg.Password,
		arg.IsAlive,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Password,
		&i.CreatedAt,
		&i.IsAlive,
	)
	return i, err
}
