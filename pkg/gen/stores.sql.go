// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: stores.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStore = `-- name: CreateStore :one
INSERT INTO Stores (address, created_at, is_alive)
VALUES ($1, $2, $3)
RETURNING id, address, created_at, updated_at, is_alive
`

type CreateStoreParams struct {
	Address   string
	CreatedAt pgtype.Timestamp
	IsAlive   bool
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, createStore, arg.Address, arg.CreatedAt, arg.IsAlive)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAlive,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
update stores
set is_alive = false
where id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteStore, id)
	return err
}

const getStore = `-- name: GetStore :one
select id, address, created_at, updated_at, is_alive
from stores
where id = $1
limit 1
`

func (q *Queries) GetStore(ctx context.Context, id int32) (Store, error) {
	row := q.db.QueryRow(ctx, getStore, id)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAlive,
	)
	return i, err
}

const getStores = `-- name: GetStores :many
select id, address, created_at, updated_at, is_alive
from stores
where is_alive = true
order by id
`

func (q *Queries) GetStores(ctx context.Context) ([]Store, error) {
	rows, err := q.db.Query(ctx, getStores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Store
	for rows.Next() {
		var i Store
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsAlive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStore = `-- name: UpdateStore :one
update stores
set address = $2,
    updated_at = now(),
    is_alive = $3
where id = $1
returning id, address, created_at, updated_at, is_alive
`

type UpdateStoreParams struct {
	ID      int32
	Address string
	IsAlive bool
}

func (q *Queries) UpdateStore(ctx context.Context, arg UpdateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, updateStore, arg.ID, arg.Address, arg.IsAlive)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAlive,
	)
	return i, err
}
