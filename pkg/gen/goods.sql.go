// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: goods.sql

package gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGood = `-- name: CreateGood :one
INSERT INTO Goods (article, price, name, quantity, is_alive)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, article, price, name, quantity, is_alive
`

type CreateGoodParams struct {
	Article  string
	Price    pgtype.Numeric
	Name     string
	Quantity int32
	IsAlive  bool
}

func (q *Queries) CreateGood(ctx context.Context, arg CreateGoodParams) (Good, error) {
	row := q.db.QueryRow(ctx, createGood,
		arg.Article,
		arg.Price,
		arg.Name,
		arg.Quantity,
		arg.IsAlive,
	)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.Article,
		&i.Price,
		&i.Name,
		&i.Quantity,
		&i.IsAlive,
	)
	return i, err
}

type CreateManyGoodsParams struct {
	Article  string
	Price    pgtype.Numeric
	Name     string
	Quantity int32
	IsAlive  bool
}

const deleteGood = `-- name: DeleteGood :exec
UPDATE Goods
SET is_alive = false
WHERE id = $1
`

func (q *Queries) DeleteGood(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteGood, id)
	return err
}

const getGood = `-- name: GetGood :one
SELECT id, article, price, name, quantity, is_alive
FROM Goods
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetGood(ctx context.Context, id int32) (Good, error) {
	row := q.db.QueryRow(ctx, getGood, id)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.Article,
		&i.Price,
		&i.Name,
		&i.Quantity,
		&i.IsAlive,
	)
	return i, err
}

const listGoods = `-- name: ListGoods :many
SELECT id, article, price, name, quantity, is_alive
FROM Goods
WHERE is_alive = true
ORDER BY name
`

func (q *Queries) ListGoods(ctx context.Context) ([]Good, error) {
	rows, err := q.db.Query(ctx, listGoods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Good
	for rows.Next() {
		var i Good
		if err := rows.Scan(
			&i.ID,
			&i.Article,
			&i.Price,
			&i.Name,
			&i.Quantity,
			&i.IsAlive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGood = `-- name: UpdateGood :one
UPDATE Goods
SET article  = $2,
    price    = $3,
    name     = $4,
    quantity = $5,
    is_alive = $6
WHERE id = $1
RETURNING id, article, price, name, quantity, is_alive
`

type UpdateGoodParams struct {
	ID       int32
	Article  string
	Price    pgtype.Numeric
	Name     string
	Quantity int32
	IsAlive  bool
}

func (q *Queries) UpdateGood(ctx context.Context, arg UpdateGoodParams) (Good, error) {
	row := q.db.QueryRow(ctx, updateGood,
		arg.ID,
		arg.Article,
		arg.Price,
		arg.Name,
		arg.Quantity,
		arg.IsAlive,
	)
	var i Good
	err := row.Scan(
		&i.ID,
		&i.Article,
		&i.Price,
		&i.Name,
		&i.Quantity,
		&i.IsAlive,
	)
	return i, err
}
