basePath: /
definitions:
  services.AccountDto:
    properties:
      created_at:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
      login:
        type: string
    type: object
  services.CreateAccountDto:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  services.CreateCustomerDto:
    properties:
      accountId:
        type: integer
      balance:
        type: integer
    type: object
  services.CreateEmployeeRequest:
    properties:
      account_id:
        type: integer
      role_id:
        type: integer
    type: object
  services.CreateGoodDto:
    properties:
      article:
        type: string
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
    type: object
  services.CreateGoodsSupplierDto:
    properties:
      product_id:
        type: integer
      supplier_id:
        type: integer
    type: object
  services.CreateRoleDto:
    properties:
      name:
        type: string
    type: object
  services.CreateStoreDto:
    properties:
      address:
        type: string
    type: object
  services.CreateSupplierDto:
    properties:
      account_id:
        type: integer
    type: object
  services.CustomerDto:
    properties:
      account:
        $ref: '#/definitions/services.AccountDto'
      balance:
        type: integer
      created_at:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
    type: object
  services.EmployeeDto:
    properties:
      account:
        $ref: '#/definitions/services.AccountDto'
      created_at:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
      role:
        $ref: '#/definitions/services.RoleDto'
    type: object
  services.GoodDto:
    properties:
      article:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
    type: object
  services.RoleDto:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  services.StoreDto:
    properties:
      address:
        type: string
      created_at:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
      updated_at:
        type: string
    type: object
  services.SupplierDto:
    properties:
      account:
        $ref: '#/definitions/services.AccountDto'
      created_at:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
    type: object
  services.UpdateAccountDto:
    properties:
      is_alive:
        type: boolean
      login:
        type: string
      password:
        type: string
    type: object
  services.UpdateCustomerDto:
    type: object
  services.UpdateEmployeeDto:
    properties:
      accountId:
        type: integer
      isAlive:
        type: boolean
      roleId:
        type: integer
    type: object
  services.UpdateGoodDto:
    properties:
      article:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
      name:
        type: string
      price:
        type: integer
      quantity:
        type: integer
    type: object
  services.UpdateStoreDto:
    properties:
      address:
        type: string
      id:
        type: integer
      is_alive:
        type: boolean
    type: object
  services.UpdateSupplierDto:
    properties:
      id:
        type: integer
      is_alive:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API для управления магазином бытовой техники.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Home Appliance Store API
  version: "1.0"
paths:
  /accounts:
    get:
      description: Возвращает все аккаунты
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.AccountDto'
            type: array
      summary: Получить список аккаунтов
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Создаёт новый аккаунт
      parameters:
      - description: Данные для создания аккаунта
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/services.CreateAccountDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AccountDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать аккаунт
      tags:
      - accounts
  /accounts/{id}:
    delete:
      description: Удаляет аккаунт по id
      parameters:
      - description: ID аккаунта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить аккаунт
      tags:
      - accounts
    get:
      description: Возвращает аккаунт по идентификатору
      parameters:
      - description: ID аккаунта
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AccountDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить аккаунт по id
      tags:
      - accounts
    put:
      consumes:
      - application/json
      description: Обновляет данные аккаунта по id
      parameters:
      - description: ID аккаунта
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления аккаунта
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/services.UpdateAccountDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.AccountDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновить аккаунт
      tags:
      - accounts
  /customers:
    get:
      description: Возвращает всех клиентов
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.CustomerDto'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить список клиентов
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: Создаёт нового клиента
      parameters:
      - description: Данные для создания клиента
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/services.CreateCustomerDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.CustomerDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать клиента
      tags:
      - customers
  /customers/{id}:
    delete:
      description: Удаляет клиента по id
      parameters:
      - description: ID клиента
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить клиента
      tags:
      - customers
    get:
      description: Возвращает клиента по идентификатору
      parameters:
      - description: ID клиента
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.CustomerDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить клиента по id
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: Обновляет данные клиента по id
      parameters:
      - description: ID клиента
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления клиента
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/services.UpdateCustomerDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.CustomerDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновить клиента
      tags:
      - customers
  /employees:
    get:
      description: Возвращает всех сотрудников
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.EmployeeDto'
            type: array
      summary: Получить список сотрудников
      tags:
      - employees
    post:
      consumes:
      - application/json
      description: Создаёт нового сотрудника
      parameters:
      - description: Данные для создания сотрудника
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/services.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.EmployeeDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать сотрудника
      tags:
      - employees
  /employees/{id}:
    delete:
      description: Удаляет сотрудника по id
      parameters:
      - description: ID сотрудника
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Удалить сотрудника
      tags:
      - employees
    get:
      description: Возвращает сотрудника по идентификатору
      parameters:
      - description: ID сотрудника
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.EmployeeDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить сотрудника по id
      tags:
      - employees
    put:
      consumes:
      - application/json
      description: Обновляет данные сотрудника по id
      parameters:
      - description: ID сотрудника
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления сотрудника
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/services.UpdateEmployeeDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.EmployeeDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновить сотрудника
      tags:
      - employees
  /goods:
    get:
      description: Возвращает все товары
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.GoodDto'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Получить список товаров
      tags:
      - goods
    post:
      consumes:
      - application/json
      description: Создаёт новый товар
      parameters:
      - description: Данные товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.CreateGoodDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.GoodDto'
      summary: Создать новый товар
      tags:
      - goods
    put:
      consumes:
      - application/json
      description: Обновляет данные товара
      parameters:
      - description: Данные для обновления товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/services.UpdateGoodDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GoodDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Обновить товар
      tags:
      - goods
  /goods-supplier:
    post:
      consumes:
      - application/json
      description: Создаёт новую связь между товаром и поставщиком
      parameters:
      - description: Данные для создания связи
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/services.CreateGoodsSupplierDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.CreateGoodsSupplierDto'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Создать связь между товаром и поставщиком
      tags:
      - goods-supplier
  /goods-supplier/{id}:
    delete:
      description: Удаляет связь между товаром и поставщиком по идентификатору
      parameters:
      - description: ID связи
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Удалить связь между товаром и поставщиком
      tags:
      - goods-supplier
  /goods-supplier/by_good_id/{id}:
    get:
      description: Возвращает поставщиков, связанных с товаром
      parameters:
      - description: ID товара
        in: path
        name: good_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.SupplierDto'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Получить поставщиков по товару
      tags:
      - goods-supplier
  /goods-supplier/by_supplier_id/{id}:
    get:
      description: Возвращает товары, связанные с поставщиком
      parameters:
      - description: ID поставщика
        in: path
        name: supplier_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.GoodDto'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Получить товары по поставщику
      tags:
      - goods-supplier
  /goods/{id}:
    delete:
      description: Удаляет товар по идентификатору
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Удалить товар
      tags:
      - goods
    get:
      description: Возвращает товар по идентификатору
      parameters:
      - description: ID товара
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GoodDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Получить товар по id
      tags:
      - goods
  /roles:
    get:
      description: Возвращает все роли
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.RoleDto'
            type: array
      summary: Получить список ролей
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Создаёт новую роль
      parameters:
      - description: Данные для создания роли
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/services.CreateRoleDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.RoleDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Создать роль
      tags:
      - roles
  /roles/{id}:
    get:
      description: Возвращает роль по идентификатору
      parameters:
      - description: ID роли
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.RoleDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Получить роль по id
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Обновляет данные роли по id
      parameters:
      - description: ID роли
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления роли
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/services.CreateRoleDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.RoleDto'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Обновить роль
      tags:
      - roles
  /stores:
    get:
      description: Возвращает все магазины
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.StoreDto'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Получить список магазинов
      tags:
      - stores
    post:
      consumes:
      - application/json
      description: Создаёт новый магазин
      parameters:
      - description: Данные для создания магазина
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/services.CreateStoreDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.StoreDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Создать магазин
      tags:
      - stores
  /stores/{id}:
    delete:
      description: Удаляет магазин по id
      parameters:
      - description: ID магазина
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Удалить магазин
      tags:
      - stores
    get:
      description: Возвращает магазин по идентификатору
      parameters:
      - description: ID магазина
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.StoreDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Получить магазин по id
      tags:
      - stores
    put:
      consumes:
      - application/json
      description: Обновляет данные магазина по id
      parameters:
      - description: ID магазина
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления магазина
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/services.UpdateStoreDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.StoreDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Обновить магазин
      tags:
      - stores
  /suppliers:
    get:
      description: Возвращает всех поставщиков
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.SupplierDto'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Получить список поставщиков
      tags:
      - suppliers
    post:
      consumes:
      - application/json
      description: Создаёт нового поставщика
      parameters:
      - description: Данные для создания поставщика
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/services.CreateSupplierDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.SupplierDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Создать поставщика
      tags:
      - suppliers
  /suppliers/{id}:
    delete:
      description: Удаляет поставщика по id
      parameters:
      - description: ID поставщика
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Удалить поставщика
      tags:
      - suppliers
    get:
      description: Возвращает поставщика по идентификатору
      parameters:
      - description: ID поставщика
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.SupplierDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Получить поставщика по id
      tags:
      - suppliers
    put:
      consumes:
      - application/json
      description: Обновляет данные поставщика по id
      parameters:
      - description: ID поставщика
        in: path
        name: id
        required: true
        type: integer
      - description: Данные для обновления поставщика
        in: body
        name: supplier
        required: true
        schema:
          $ref: '#/definitions/services.UpdateSupplierDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.SupplierDto'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Обновить поставщика
      tags:
      - suppliers
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
